!obj:pylearn2.train.Train {
    dataset: &train !obj:model.msr_dataset.MSRDataset {
              path_to_data: '/home/ognawala/data/clinic_downsized/',
              which_set: 'train',
        # We preprocess the data with global contrast normalization
        #preprocessor: &prepro !obj:pylearn2.datasets.preprocessing.GlobalContrastNormalization {
        #    sqrt_bias: 10,
        #    use_std: 1
        #    }
    },
    # Here we specify the model to train as being an MLP
    model: !obj:pylearn2.models.mlp.MLP {
        layers : [
            !obj:pylearn2.models.mlp.Sigmoid {
                layer_name: 'm0',
                dim: 500,
                irange: .05,
            },
            !obj:pylearn2.models.mlp.Softmax {
                layer_name: 'y',
                # The classes are unbalanced. Set the bias parameters of the softmax regression
                # to make the model start with the right marginals. This should speed convergence
                # of the training algorithm.
                init_bias_target_marginals: *train,
                irange: .0,
                n_classes: 2
            }
        ],
        # The inputs are 71x71 pixel images
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [55, 55],
            num_channels: 10
        }
    },
    # We train using SGD and momentum
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 200,
        learning_rate: .001,
        #init_momentum: .75,
        # We monitor how well we're doing during training on a validation set
        monitoring_dataset:
              {
                   'train' : *train,
                   'valid' : !obj:model.msr_dataset.MSRDataset {
                   path_to_data: '/home/ognawala/data/clinic_downsized/',
                   which_set: 'test',
                   }
              },
        # We stop when validation set classification error hasn't decreased for 10 epochs
        #termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
        #    channel_name: "valid_y_misclass",
        #    prop_decrease: 0.,
        #    N: 5
        #},
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.001,
            min_lr: .0001
        }
    },
    # We save the model whenever we improve on the validation set classification error
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "model/bestmodels/MLP-55x55x10_clinic.pkl"
        },
    ],
}
